<?php
/**
 * Created by BChar
 * Date: 04/07/2018
 * Time: 22:42
 * src/Service/BCFilesExtension.phpp
 */
namespace App\Service;

// ================================================================================================================== //
// Imports.                                                                                                           //
// ================================================================================================================== //
use Symfony\Component\HttpFoundation\File\UploadedFile;


// ================================================================================================================== //
// Service.                                                                                                           //
// ================================================================================================================== //
class FileUploader{
    // Attributs.
    // ----------
    private $targetDirectory;
    private $extension;

    // Constructeur.
    // -------------
    public function __construct($targetDirectory){
        $this->targetDirectory = $targetDirectory;
        $this->createUploadsDirectory();
        $this->createThumbnailsDirectory();
    }

    // Getter & Setter
    public function getTargetDirectory(){
        return $this->targetDirectory;
    }

    public function getExtension(){
        return $this->extension;
    }

    public function setExtension($extension){
        $this->extension = $extension;
        return $this;
    }


    // Méthodes.
    // ---------
    // Ctrl existence du dossier uploads.
    private function createUploadsDirectory(){
        if(!is_dir($this->getTargetDirectory())){
        mkdir($this->getTargetDirectory());
        }
    }

    // Ctrl existence du dossier uploads/thumbnails.
    private function createThumbnailsDirectory(){
        if(!is_dir($this->getTargetDirectory()."thumbnails/")){
            mkdir($this->getTargetDirectory()."thumbnails/");
        }
    }

    // Créat° d'un nom unique + stockage dans le dossier paramétré.
    public function upload(UploadedFile $file){
        $this->setExtension($file->guessExtension());
        // md5() reduces the similarity of the file names generated by uniqid(), which is based on timestamps
        $fileName = md5(uniqid()).'.'.$this->getExtension();
        $file->move($this->getTargetDirectory(), $fileName);

        return $fileName;
    }

    // Supress° du fichier
    public function delete($filename){

        // Construct°  URL du media.
        $urlFile = $this->getTargetDirectory().$filename;
        unlink($urlFile);

        // Construct°  URL du Thumbnails.
        $urlThumb = $this->getTargetDirectory()."thumbnails/".$filename;
        unlink($urlThumb);
    }

    // Créat° d'un Thumbnails.
    public function makeThumbnails($filename)
    {
        // Construct° de l'extens°.
        $ext =$this->getExtension();

        // Construct°  URL source
        $urlFile = $this->getTargetDirectory()."/".$filename;

        // Construct°  URL cible
        $urlThumb = $this->getTargetDirectory()."/thumbnails/".$filename;

        dump($filename, $ext, $urlFile, $urlThumb);

        // Construct° selon extens°.
        switch($ext){
            case 'gif' :
                header('Content-type: image/gif');
                $img = imagecreatefromgif($urlFile);
                break;
            case 'jpg' :
                header('Content-type: image/jpeg');
                $img = imagecreatefromjpeg($urlFile);
                break;
            case 'jpeg':
                $img = imagecreatefromjpeg($urlFile);
                header('Content-type: image/jpeg');
                break;
            case 'png' :
                header('Content-type: image/png');
                $img = imagecreatefrompng($urlFile);
                break;
            default    :
                header('Content-type: image/jpeg');
                $img = imagecreatefrompng($urlFile);
        }

        // Ctrl des dimens°.
        $max = 100;
        list($x, $y) = getimagesize($urlFile);
        $nx = $max;
        $ny = $max;

        // Calcul des nouvelles dimens°.
        if($x>$max or $y>$max)
        {
            if($x>$y)
            {
                $ny = $y/($x/$max);
            }
            else
            {
                $nx = $x/($y/$max);
            }
        }

        // Redimensionnement.
        $thumb = imagecreatetruecolor($nx,$ny);
        imagecopyresampled($thumb,$img,0,0,0,0,$nx,$ny,$x,$y);

        // Copie de Thumbnails.
        switch($ext){
            case 'gif' : imagegif($thumb, $urlThumb); break;
            case 'jpg' : imagejpeg($thumb, $urlThumb); break;
            case 'jpeg': imagejpeg($thumb, $urlThumb); break;
            case 'png' : imagepng($thumb, $urlThumb); break;
            default    : imagepng($thumb, $urlThumb);
        }
        dump($thumb, $img, $nx, $ny);
    }
}